<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview[0], view_hview[0]);
enum menu_element_type {
    script_runner,
    page_transfer,
    slider,
    shift,
    toggle,
    input,
    checkbox,
    textbox,
    numberpad
}
enum menu_page {
    main,
    settings,
    graphics,
    audio,
    keys,
    movement,
    actions,
    play,
    server_page,
    client_page,
}
ds_menu_main = create_menu_page(
    arr("PLAY",         menu_element_type.page_transfer,    menu_page.play),
    arr("SETTINGS",     menu_element_type.page_transfer,    menu_page.settings),
    arr("QUIT",         menu_element_type.script_runner,    gscr_quit)
);

ds_menu_settings = create_menu_page(
    arr("GRAPHICS",     menu_element_type.page_transfer,    menu_page.graphics),
    arr("AUDIO",        menu_element_type.page_transfer,    menu_page.audio),
    arr("CONTROLS",     menu_element_type.page_transfer,    menu_page.keys),
    arr("BACK",         menu_element_type.page_transfer,    menu_page.main)
);
ds_menu_play = create_menu_page(
    arr("JOIN SERVER",  menu_element_type.page_transfer,    menu_page.client_page),
    arr("HOST SERVER",  menu_element_type.page_transfer,    menu_page.server_page),
    arr("BACK",         menu_element_type.page_transfer,    menu_page.main)
);
ds_menu_server = create_menu_page(
    arr("PORT",         menu_element_type.numberpad,        "35534"),
    arr("HOST",         menu_element_type.script_runner,    gscr_host),
    arr("BACK",         menu_element_type.page_transfer,    menu_page.play)
);
ds_menu_client = create_menu_page(
    arr("IP",           menu_element_type.numberpad,        "00.000.000.00"),
    arr("PORT",         menu_element_type.numberpad,        "35534"),
    arr("JOIN",         menu_element_type.script_runner,    gscr_join),
    arr("BACK",         menu_element_type.page_transfer,    menu_page.play)
);
ds_menu_graphics = create_menu_page(
    arr("RESOLUTION",   menu_element_type.shift,                change_resolution,              0,                  arr(string(display_get_width()) + " x " + string(display_get_height()),"1440 x 900", "1280 x 800", "1366 x 768", "1920 x 1080")),
    arr("WINDOW MODE",   menu_element_type.toggle,               change_window_mode,             1,                  arr("off", "on")),
    arr("BACK",         menu_element_type.page_transfer,        menu_page.settings)
);

ds_menu_controls = create_menu_page(
    arr("MOVEMENT",     menu_element_type.page_transfer,        menu_page.movement),
    arr("ACTIONS",      menu_element_type.page_transfer,        menu_page.actions),
    arr("BACK",         menu_element_type.page_transfer,        menu_page.settings)
);
ds_menu_movement = create_menu_page(
    arr("UP",           menu_element_type.input,                "up",                           global.up),
    arr("DOWN",         menu_element_type.input,                "down",                         global.down),
    arr("LEFT",         menu_element_type.input,                "right",                        global.right),
    arr("RIGHT",        menu_element_type.input,                "left",                         global.left),
    arr("BACK",         menu_element_type.page_transfer,        menu_page.keys)
);
ds_menu_actions = create_menu_page(
    arr("SPRINT",       menu_element_type.input,                "sprint",                       global.sprint),
    arr("ESC",          menu_element_type.input,                "esc",                          global.esc),
    arr("LIGHT",        menu_element_type.input,                "flashlight",                   global.flashlight),
    arr("BACK",         menu_element_type.page_transfer,        menu_page.keys)
);
ds_menu_audio = create_menu_page(
    arr("VOLUME",       menu_element_type.slider,               change_master_volume,           1,                              arr(0, 1)),
    arr("BACK",         menu_element_type.page_transfer,        menu_page.settings)
);

page = menu_page.main;
menu_pages[menu_page.main]          = ds_menu_main;
menu_pages[menu_page.settings]      = ds_menu_settings;
menu_pages[menu_page.graphics]      = ds_menu_graphics;
menu_pages[menu_page.keys]          = ds_menu_controls;
menu_pages[menu_page.movement]      = ds_menu_movement;
menu_pages[menu_page.actions]       = ds_menu_actions;
menu_pages[menu_page.play]          = ds_menu_play;
menu_pages[menu_page.server_page]   = ds_menu_server;
menu_pages[menu_page.client_page]   = ds_menu_client;
menu_pages[menu_page.audio]         = ds_menu_audio;


var i = 0; array_len = array_length_1d(menu_pages);
repeat(array_len){
    menu_option[i] = -1;
    prev_menu_option[i] = -1;
    i++;
}

inputting = false;
already_selected = false;

global.port = 35534;
global.ip = "94.208.164.81"














</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cleanup
var i = 0, array_len = array_length_1d(menu_pages);
repeat(array_len){
    ds_grid_destroy(menu_pages[i]);
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mb = mouse_check_button_released(mb_left);
var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);
var gwidth = display_get_gui_width(), gheight = display_get_gui_height();
var x_buffer = 32, y_buffer = 32;
var start_y = y_buffer, start_x = x_buffer;

for(var yy = 0; yy &lt; ds_height; yy++){
    lty = start_y+(yy*y_buffer);
    var text = ds_grid[# 0, yy];
    var tx = start_x-x_buffer/3, ty = lty-y_buffer/3, bx = gwidth/2, by = lty+y_buffer/3;
    var hover = point_in_rectangle(mouse_x, mouse_y, tx, ty, bx, by);
    if(hover&amp;&amp;mb){
        menu_option[page] = yy;
    }else if(!hover&amp;&amp;mb){
    
    }
}

if(mb&amp;&amp;menu_option[page]!=-1){
    switch(ds_grid[# 1, menu_option[page]]){
        default:break;
        case menu_element_type.page_transfer:page = ds_grid[# 2, menu_option[page]];break;
        case menu_element_type.script_runner:script_execute(ds_grid[# 2, menu_option[page]]);break;
        case menu_element_type.shift:
        case menu_element_type.slider:
        case menu_element_type.toggle:
        case menu_element_type.input:
            inputting = !inputting;
    }   
}
prev_menu_option[page] = menu_option[page];



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the menu
draw_set_font(f_pixelari);
//getting some variables
var x_buffer = 32, y_buffer = 32;
var gwidth = display_get_gui_width(), gheight = display_get_gui_height();
var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);
var start_y = y_buffer, start_x = x_buffer;
var lty = 0;

//drawing the background
draw_background_ext(bg_menu, 0, 0, gwidth/background_get_width(bg_menu), gheight/background_get_height(bg_menu), 0, c_white, 1);

//drawing the menu items
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

c = c_white;

//draw the menu types
var rtx = gwidth/2+x_buffer, rty;
for(var yy = 0; yy &lt; ds_height; yy++){
    rty = start_y+(yy*y_buffer);
    lty = start_y+(yy*y_buffer);
    
    var tx = start_x-x_buffer/3, ty = lty-y_buffer/3, bx = gwidth/2, by = lty+y_buffer/3;
    draw_gui_box(tx, ty, bx, by, yy);
    draw_gui_text(start_x, lty, ds_grid[# 0, yy], c, menu_option[page]==yy, yy); 
    
    var tx = rtx-x_buffer/3, ty = rty-y_buffer/3, bx = gwidth-x_buffer, by = rty+y_buffer/3;
    
    switch(ds_grid[# 1, yy]){
    
        case menu_element_type.shift:
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var right_shift = " &gt;&gt;";
            var left_shift = "&lt;&lt; ";
            
            if(current_val==0) left_shift = "";
            if(current_val == array_length_1d(current_array)-1) right_shift = "";
            
            c = c_white;

            draw_gui_box(tx, ty, bx, by, yy);
            draw_gui_text(rtx, rty, left_shift + current_array[current_val] + right_shift, c, inputting, yy);
        break;
        case menu_element_type.slider:
            
            len = bx-tx;
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var pos = ((current_val-current_array[0])/current_array[1] - current_array[0]);
            
            c = c_gray;
            draw_rectangle_colour(tx, ty, tx+len*pos, by, c, c, c, c, false);
            
            c = c_white;
            draw_gui_box(tx, ty, bx, by, yy);
            draw_gui_text(rtx, rty, string(round(pos*100)) + " %", c, inputting,yy);
            
        break;
        case menu_element_type.toggle:
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            c = c_white;
            draw_gui_box(tx, ty, bx, by,yy);
            draw_gui_text(rtx, rty, current_array[current_val], c, inputting,yy);
        break; 
        case menu_element_type.input:
            var current_val = ds_grid[# 3, yy];
            var string_val = get_key_string(current_val);
            c = c_white;
            draw_gui_box(tx, ty, bx, by, yy);
            draw_gui_text(rtx, rty, string_val, c, inputting, yy);
        break; 
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
