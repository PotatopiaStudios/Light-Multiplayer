<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
global.view_width = view_wview[0];
global.view_height = view_hview[0];
global.ip = "94.208.164.81";
global.port = "35534";
display_set_gui_size(global.view_width, global.view_height);
enum menu_element_type {
    script_runner,
    page_transfer,
    slider,
    shift,
    toggle,
    input,
    typbox,
    balance_slider,
    variable_test,
    displ
}

enum menu_page {
    main = 0,
    settings = 1,
    graphics = 2,
    input = 3,
    movement = 4,
    actions =5 ,
    play = 6,
    server_page = 7,
    client_page=8,
    height
}




ds_menu_main = create_menu_page(
arr("PLAY",         menu_element_type.page_transfer,        menu_page.play),
arr("SETTING",      menu_element_type.page_transfer,        menu_page.settings),
arr("EXIT",         menu_element_type.script_runner,        exit_game),
);

ds_menu_play = create_menu_page(
arr("JOIN",         menu_element_type.page_transfer,        menu_page.client_page),
arr("HOST",         menu_element_type.page_transfer,        menu_page.server_page),
arr("BACK",         menu_element_type.page_transfer,        menu_page.main)
);

ds_menu_client = create_menu_page(
arr("IP",           menu_element_type.typbox,               change_ip,                      global.ip,                  arr(128, "0-1-2-3-4-5-6-7-8-9-.")),
arr("PORT",         menu_element_type.typbox,               change_port,                    global.port,                  arr(128, "0-1-2-3-4-5-6-7-8-9")),
arr("JOIN",         menu_element_type.script_runner,        join_game),
arr("BACK",         menu_element_type.page_transfer,        menu_page.play)
);

ds_menu_server = create_menu_page(
arr("PORT",         menu_element_type.typbox,               change_port,                    global.port,                  arr(128, "0-1-2-3-4-5-6-7-8-9")),
arr("HOST",         menu_element_type.script_runner,        host_game),
arr("BACK",         menu_element_type.page_transfer,        menu_page.play)
);

ds_menu_settings = create_menu_page(
arr("GRAPHICS",     menu_element_type.page_transfer,        menu_page.graphics),
arr("CONTROLS",     menu_element_type.page_transfer,        menu_page.input),
arr("BACK",         menu_element_type.page_transfer,        menu_page.main)
);

ds_menu_graphics = create_menu_page(
arr("RESOLUTION",   menu_element_type.shift,                change_resolution,              0,                  arr(string(display_get_width()) + " x " + string(display_get_height()),"1440 x 900", "1280 x 800", "1366 x 768", "1920 x 1080")),
arr("FULLSCREEN",   menu_element_type.toggle,               change_window_mode,             1,                  arr(0, 1)),
arr("BACK",         menu_element_type.page_transfer,        menu_page.settings)
);

ds_menu_controls = create_menu_page(
arr("MOVEMENT",     menu_element_type.page_transfer,        menu_page.movement),
arr("ACTIONS",      menu_element_type.page_transfer,        menu_page.actions),
arr("BACK",         menu_element_type.page_transfer,        menu_page.settings)
);

ds_menu_movement = create_menu_page(
arr("UP",           menu_element_type.input,                "up",                           global.up),
arr("DOWN",         menu_element_type.input,                "down",                         global.down),
arr("LEFT",         menu_element_type.input,                "right",                        global.right),
arr("RIGHT",        menu_element_type.input,                "left",                         global.left),
arr("BACK",         menu_element_type.page_transfer,        menu_page.input)
);

ds_menu_actions = create_menu_page(
arr("SPRINT",       menu_element_type.input,                "sprint",                       global.sprint),
arr("FLASHLIGHT",   menu_element_type.input,                "flashlight",                   global.flashlight),
arr("ESC",          menu_element_type.input,                "esc",                          global.esc),
arr("DROP",         menu_element_type.input,                "drop",                         global.drop),
arr("BACK",         menu_element_type.page_transfer,        menu_page.input)
);





page = menu_page.main;
menu_pages[menu_page.main] = ds_menu_main;
menu_pages[menu_page.play] = ds_menu_play;
menu_pages[menu_page.server_page] = ds_menu_server;
menu_pages[menu_page.client_page] = ds_menu_client;
menu_pages[menu_page.settings] = ds_menu_settings;
menu_pages[menu_page.graphics] = ds_menu_graphics;
menu_pages[menu_page.input] = ds_menu_controls;
menu_pages[menu_page.movement] = ds_menu_movement;
menu_pages[menu_page.actions] = ds_menu_actions;


var i = 0; array_len = array_length_1d(menu_pages);
repeat(array_len){
    menu_option[i] = 0;
    i++;
}

inputting = false;
selected_colour = c_teal;
delete_timer = 2;



var width = window_get_width();
var height = window_get_height();
window_set_size(width, height);
for(var i = 1; i &lt;= room_last; i++){
    room_set_view_enabled(i, true);
    
    room_set_view(i, 0, true, 0, 0, 128*(width/height), 128, 0, 0, width, height, 0, 0, 0, 0, noone);
}
surface_resize(application_surface, width, height);



















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = 0; array_len = array_length_1d(menu_pages);
repeat(array_len){
    ds_grid_destroy(menu_pages[i]);
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
input_up_p      = keyboard_check_pressed(global.up);
input_down_p    = keyboard_check_pressed(global.down);
input_enter_p   = keyboard_check_pressed(global.accept);
var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);
if(inputting){
    switch(ds_grid[# 1, menu_option[page]]){
        case menu_element_type.shift:
            var hinput = keyboard_check_pressed(global.right) - keyboard_check_pressed(global.left);
            if(hinput != 0){
                //audio
                ds_grid[# 3, menu_option[page]] += hinput;
                ds_grid[# 3, menu_option[page]] = clamp(ds_grid[# 3, menu_option[page]], 0, array_length_1d(ds_grid[# 4, menu_option[page]])-1);
            }
        break;
        case menu_element_type.slider:
            var hinput = keyboard_check_pressed(global.right) - keyboard_check_pressed(global.left);
            var clamps = ds_grid[# 4, menu_option[page]];
            if(hinput != 0){
                ds_grid[# 3, menu_option[page]] -= hinput*0.01;
                ds_grid[# 3, menu_option[page]] = clamp(ds_grid[# 3, menu_option[page]], clamps[0], clamps[1]);
            }
        break;
        case menu_element_type.toggle:
            var hinput = keyboard_check_pressed(global.right) - keyboard_check_pressed(global.left);
            if(hinput != 0){
                //audio
                ds_grid[# 3, menu_option[page]] += hinput;
                ds_grid[# 3, menu_option[page]] = clamp(ds_grid[# 3, menu_option[page]], 0, 1);
            }
        break;
        case menu_element_type.input:
            
            var kk = keyboard_lastkey;
            if(kk != vk_enter){
                ds_grid[# 3, menu_option[page]] = kk;
                variable_global_set(ds_grid[# 2, menu_option[page]], kk);
            }
        
        break;
        case menu_element_type.typbox:
            
            if(keyboard_check(vk_anykey)){
                var key = string_char_at(keyboard_string, string_length(keyboard_string));
                var current_array = ds_grid[# 4, menu_option[page]];
                var allowed_chars = string_split(current_array[1], "-");
                var allowed = false;
                for(var i = 0; i &lt; array_length_1d(allowed_chars); i++){
                    if(allowed_chars[i] != key){
                        continue;
                    }else{
                        allowed = true;
                    }
                }
                if(!allowed){
                    key = "";
                }
                
                keyboard_string = "";
                for(var i = 1; i &lt; string_length(key); i++){
                    string_delete(key, string_length(key)-i, 1);
                }
                var backspace = keyboard_lastkey;
                var val = ds_grid[# 3, menu_option[page]];
                
                
                if(string_width("  " + val) &lt;= current_array[0]){
                    
                    if(backspace != vk_enter &amp;&amp; backspace != vk_backspace &amp;&amp; backspace != vk_space){
                        
                        ds_grid[# 3, menu_option[page]] = val + key;
                    
                    }
                    
                }
            }
            if(keyboard_check(vk_backspace) &amp;&amp; !keyboard_check_pressed(vk_backspace) &amp;&amp; delete_timer &gt;= 2){
                var key = keyboard_string;
                keyboard_string = "";
                var backspace = keyboard_lastkey;
                var val = ds_grid[# 3, menu_option[page]];
                ds_grid[# 3, menu_option[page]] = string_delete(val, string_length(val), 1);
                delete_timer = 0;
            }
            if(keyboard_check_pressed(vk_backspace)){
                var key = keyboard_string;
                keyboard_string = "";
                var backspace = keyboard_lastkey;
                var val = ds_grid[# 3, menu_option[page]];
                ds_grid[# 3, menu_option[page]] = string_delete(val, string_length(val), 1);
                delete_timer = -room_speed/5;
            }
            if(delete_timer &lt;= 2){
                delete_timer++;
            }
        break;
        case menu_element_type.balance_slider:
            var hinput = keyboard_check_pressed(global.left) - keyboard_check_pressed(global.right);
            var clamps = ds_grid[# 4, menu_option[page]];
            var p = -hinput;
            if(p == 1 &amp;&amp; global.balance_points &gt;= 1 &amp;&amp; ds_grid[# 3, menu_option[page]] &lt; clamps[1]){
                ds_grid[# 3, menu_option[page]] -= hinput*0.01;
                ds_grid[# 3, menu_option[page]] = clamp(ds_grid[# 3, menu_option[page]], clamps[0], clamps[1]);
                global.balance_points--;
            }
            if(p == -1 &amp;&amp; ds_grid[# 3, menu_option[page]] &gt; clamps[0]){
                ds_grid[# 3, menu_option[page]] -= hinput*0.01;
                ds_grid[# 3, menu_option[page]] = clamp(ds_grid[# 3, menu_option[page]], clamps[0], clamps[1]);
                global.balance_points++;
            }
        break;
    }
}else{
    var ochange = input_down_p - input_up_p;
    if(ochange != 0){
        menu_option[page] += ochange;
        if(menu_option[page] &gt; ds_height-1){ menu_option[page] = 0;}
        if(menu_option[page] &lt; 0){ menu_option[page] = ds_height-1;}
        
    }
}


if(input_enter_p){
    var current_array = ds_grid[# 4, menu_option[page]];
    switch(ds_grid[# 1, menu_option[page]]){
        case menu_element_type.script_runner:   script_execute(ds_grid[# 2, menu_option[page]]);  break;        
        case menu_element_type.page_transfer:   page = ds_grid[# 2, menu_option[page]]; break;
        case menu_element_type.variable_test:   if(variable_global_get(ds_grid[# 3, menu_option[page]]) == ds_grid[# 4, menu_option[page]]){script_execute(ds_grid[# 2, menu_option[page]],ds_grid[# 3, menu_option[page]])} break;
        case menu_element_type.balance_slider:  if(inputting){script_execute(ds_grid[# 2, menu_option[page]], ds_grid[# 3, menu_option[page]],current_array[2]);} inputting = !inputting; break;
        case menu_element_type.typbox:          if(inputting){script_execute(ds_grid[# 2, menu_option[page]], ds_grid[# 3, menu_option[page]]);} inputting = !inputting; break;
        case menu_element_type.shift:
        case menu_element_type.slider:          
        case menu_element_type.toggle:          if(inputting){script_execute(ds_grid[# 2, menu_option[page]], ds_grid[# 3, menu_option[page]]);}
        case menu_element_type.input:
        inputting = !inputting;
        break;
    }
    //audio
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_menu);
var gwidth = global.view_width, var gheight = global.view_height;

var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);
var y_buffer = 32, x_buffer = 16;
var start_y = (gheight/2)- ((((ds_height-1)/2) * y_buffer)), start_x = gwidth/2;

//background
var c = c_black;
draw_rectangle_colour(0, 0, gwidth, gheight, c, c, c, c, false);


//left side
draw_set_valign(fa_middle);
draw_set_halign(fa_right);


var ltx = start_x - x_buffer, lty;
var yy = 0; repeat(ds_height){
    lty = start_y + (yy*y_buffer);
    c = c_white;
    var xo = 0;
    if(yy = menu_option[page]){
        c = c_navy;
        xo = -(x_buffer/2);
    }
    if(ds_grid[# 1, yy] == menu_element_type.variable_test){
        if(!global.balance_points == ds_grid[# 4, yy]){
            c = c_dkgray;
        }
    }
    draw_text_colour(ltx + xo, lty, ds_grid[# 0, yy], c, c, c, c, 1);
    yy++;
}

//line
draw_line(start_x, start_y - y_buffer, start_x, lty + y_buffer);


//right side
draw_set_halign(fa_left);
var rtx = start_x + x_buffer, rty;

yy = 0; repeat(ds_height){
    rty = start_y + (yy*y_buffer);

    switch(ds_grid[# 1, yy]){
        case menu_element_type.shift:
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var left_shift = "&lt;&lt; ";
            var right_shift = " &gt;&gt;";
            c = c_white;
            
            if(current_val == 0) left_shift = "";
            if(current_val == array_length_1d(ds_grid[# 4, yy])-1) right_shift = "";
            
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour; }
            
            draw_text_colour(rtx, rty, left_shift + current_array[current_val] + right_shift, c, c, c, c, 1);
        
        break;
        case menu_element_type.slider:
            var len = 64;
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var circle_pos = ((current_val - current_array[0])/ current_array[1]);
            c = c_white;
            
            draw_line_width(rtx, rty, rtx+len, rty, 2);
            
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour; }
            
            draw_circle_colour(rtx + (circle_pos*len), rty, 4, c, c, false);
            draw_text_color(rtx + (len*1.2), rty, string(floor(circle_pos*100)) + " %", c, c, c,c, 1);
            
        break;
        case menu_element_type.toggle:
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var c1, c2;
            c = c_white;
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour; }
            if(current_val == 0) {c2 = c; c1 = c_dkgray; }else{c2 = c_dkgray; c1 = c}
            
            draw_text_colour(rtx, rty, "ON", c1, c1, c1, c1, 1);
            draw_text_colour(rtx + 32, rty, "OFF", c2, c2, c2, c2, 1);
        
        break;
        case menu_element_type.input:
            var current_val = ds_grid[# 3, yy];
            var string_val;
            
            string_val = get_key_string(current_val);
        
            c = c_white;
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour; }
            draw_text_colour(rtx, rty, string_val, c, c, c, c, 1);
            
        break;
        case menu_element_type.typbox:
            var current_array = ds_grid[# 4, yy];
            var len = current_array[0];
            var current_val = " " + ds_grid[# 3, yy];
            c = c_white;
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour; }
            draw_line_width_colour(rtx-1, rty-y_buffer/2, rtx+len+1, rty-y_buffer/2, 2, c, c);
            draw_line_width_colour(rtx-1, rty+y_buffer/2, rtx+len+1, rty+y_buffer/2, 2, c, c);
            draw_line_width_colour(rtx, rty-y_buffer/2-1, rtx, rty+y_buffer/2+1, 2, c, c);
            draw_line_width_colour(rtx+len, rty-y_buffer/2-1, rtx+len, rty+y_buffer/2+1, 2, c, c);
            
            c = c_white;
            while(string_width(current_val) &gt; len){
                current_val = string_delete(current_val, string_length(current_val), 1);
            }
            if(current_val == ""){
                draw_text_colour(rtx, rty, current_array[1], c, c, c, c, 1);
            }
            draw_text_colour(rtx, rty, current_val, c, c, c, c, 1);

        
        break;
        case menu_element_type.balance_slider:
            var len = 64;
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var circle_pos = ((current_val - current_array[0])/ current_array[1]);
            c = c_white;
            
            draw_line_width(rtx, rty, rtx+len, rty, 2);
            
            if(inputting &amp;&amp; yy == menu_option[page]){ c = selected_colour;}
            if(yy == menu_option[page]){draw_text_colour(rtx + (len*2), rty, string(global.balance_points), c, c, c, c, 1); }
            draw_circle_colour(rtx + (circle_pos*len), rty, 4, c, c, false);
            draw_text_color(rtx + (len*1.2), rty, string((floor(circle_pos*100)-50)+100) + " %", c, c, c,c, 1);
            
        break;
        case menu_element_type.displ:
            c = c_white;
            draw_text_color(rtx, rty, string(variable_global_get(ds_grid[# 2, yy])) + ds_grid[# 3, yy], c, c, c, c, 1);
        break;
    } 
    yy++;
}   


draw_set_valign(fa_top);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
